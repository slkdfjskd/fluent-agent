#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.

use crate::app::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::app::dto::CreateEnvironmentResult;
use crate::app::dto::CreateProjectResult;
use crate::app::dto::EntryDTO;
use crate::app::dto::EnvVariableDTO;
use crate::app::dto::EnvironmentDTO;
use crate::app::dto::GetBatchConfigResult;
use crate::app::dto::GetConfigResult;
use crate::app::dto::GetRequestLogResult;
use crate::app::dto::GetRequestResult;
use crate::app::dto::ImportProtoResult;
use crate::app::dto::LibInfo;
use crate::app::dto::ListEnvironmentResult;
use crate::app::dto::ListNavProjectResult;
use crate::app::dto::ListRequestLogData;
use crate::app::dto::ListRequestLogResult;
use crate::app::dto::NavProjectDTO;
use crate::app::dto::NavRequestDTO;
use crate::app::dto::NavServiceDTO;
use crate::app::dto::ProtoFileDTO;
use crate::app::dto::ProtoFileResult;
use crate::app::dto::RequestDTO;
use crate::app::dto::RequestLogDTO;
use crate::app::dto::RequestLogData;
use crate::app::dto::ResponseDTO;
use crate::app::dto::ResultDTO;
use crate::app::dto::SendRequestInfo;
use crate::app::dto::SendRequestResult;
use crate::app::dto::UniqueIdResult;
use crate::app::param::CreateEnvironment;
use crate::app::param::SendRequest;
use crate::app::param::UpdateEnvironment;
use crate::app::param::UpdateRequest;
use crate::common::error::Code;
use crate::common::error::Error;
use crate::common::types::ReqType;

// Section: wire functions

fn wire_init_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(init()),
    )
}
fn wire_import_proto_impl(
    port_: MessagePort,
    project_id: impl Wire2Api<i64> + UnwindSafe,
    proto_files: impl Wire2Api<Vec<String>> + UnwindSafe,
    import_paths: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "import_proto",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_project_id = project_id.wire2api();
            let api_proto_files = proto_files.wire2api();
            let api_import_paths = import_paths.wire2api();
            move |task_callback| {
                Ok(import_proto(
                    api_project_id,
                    api_proto_files,
                    api_import_paths,
                ))
            }
        },
    )
}
fn wire_get_proto_file_impl(port_: MessagePort, project_id: impl Wire2Api<i64> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_proto_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_project_id = project_id.wire2api();
            move |task_callback| Ok(get_proto_file(api_project_id))
        },
    )
}
fn wire_list_nav_project_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_nav_project",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(list_nav_project()),
    )
}
fn wire_create_project_impl(
    port_: MessagePort,
    name: impl Wire2Api<String> + UnwindSafe,
    req_type: impl Wire2Api<ReqType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_project",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_name = name.wire2api();
            let api_req_type = req_type.wire2api();
            move |task_callback| Ok(create_project(api_name, api_req_type))
        },
    )
}
fn wire_get_config_impl(port_: MessagePort, key: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_config",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            move |task_callback| Ok(get_config(api_key))
        },
    )
}
fn wire_get_batch_config_impl(port_: MessagePort, keys: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_batch_config",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_keys = keys.wire2api();
            move |task_callback| Ok(get_batch_config(api_keys))
        },
    )
}
fn wire_put_config_impl(
    port_: MessagePort,
    key: impl Wire2Api<String> + UnwindSafe,
    value: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "put_config",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            let api_value = value.wire2api();
            move |task_callback| Ok(put_config(api_key, api_value))
        },
    )
}
fn wire_delete_configs_impl(port_: MessagePort, keys: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "delete_configs",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_keys = keys.wire2api();
            move |task_callback| Ok(delete_configs(api_keys))
        },
    )
}
fn wire_delete_project_impl(port_: MessagePort, project_id: impl Wire2Api<i64> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "delete_project",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_project_id = project_id.wire2api();
            move |task_callback| Ok(delete_project(api_project_id))
        },
    )
}
fn wire_update_project_name_impl(
    port_: MessagePort,
    project_id: impl Wire2Api<i64> + UnwindSafe,
    new_name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "update_project_name",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_project_id = project_id.wire2api();
            let api_new_name = new_name.wire2api();
            move |task_callback| Ok(update_project_name(api_project_id, api_new_name))
        },
    )
}
fn wire_get_request_impl(port_: MessagePort, request_id: impl Wire2Api<i64> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_request",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request_id = request_id.wire2api();
            move |task_callback| Ok(get_request(api_request_id))
        },
    )
}
fn wire_update_request_impl(
    port_: MessagePort,
    request: impl Wire2Api<UpdateRequest> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "update_request",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Ok(update_request(api_request))
        },
    )
}
fn wire_send_request_impl(port_: MessagePort, param: impl Wire2Api<SendRequest> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_request",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_param = param.wire2api();
            move |task_callback| Ok(send_request(api_param))
        },
    )
}
fn wire_create_env_impl(port_: MessagePort, param: impl Wire2Api<CreateEnvironment> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_env",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_param = param.wire2api();
            move |task_callback| Ok(create_env(api_param))
        },
    )
}
fn wire_update_env_variable_impl(
    port_: MessagePort,
    param: impl Wire2Api<UpdateEnvironment> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "update_env_variable",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_param = param.wire2api();
            move |task_callback| Ok(update_env_variable(api_param))
        },
    )
}
fn wire_update_env_name_impl(
    port_: MessagePort,
    new_name: impl Wire2Api<String> + UnwindSafe,
    old_name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "update_env_name",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_new_name = new_name.wire2api();
            let api_old_name = old_name.wire2api();
            move |task_callback| Ok(update_env_name(api_new_name, api_old_name))
        },
    )
}
fn wire_delete_env_variable_impl(port_: MessagePort, id: impl Wire2Api<i64> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "delete_env_variable",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Ok(delete_env_variable(api_id))
        },
    )
}
fn wire_delete_env_impl(port_: MessagePort, env_name: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "delete_env",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_env_name = env_name.wire2api();
            move |task_callback| Ok(delete_env(api_env_name))
        },
    )
}
fn wire_list_env_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_env",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(list_env()),
    )
}
fn wire_unique_id_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "unique_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(unique_id()),
    )
}
fn wire_lib_info_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "lib_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(lib_info()),
    )
}
fn wire_list_next_request_log_impl(
    port_: MessagePort,
    last_id: impl Wire2Api<i64> + UnwindSafe,
    keyword: impl Wire2Api<String> + UnwindSafe,
    page_size: impl Wire2Api<u16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_next_request_log",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_last_id = last_id.wire2api();
            let api_keyword = keyword.wire2api();
            let api_page_size = page_size.wire2api();
            move |task_callback| {
                Ok(list_next_request_log(
                    api_last_id,
                    api_keyword,
                    api_page_size,
                ))
            }
        },
    )
}
fn wire_list_pre_request_log_impl(
    port_: MessagePort,
    first_id: impl Wire2Api<i64> + UnwindSafe,
    keyword: impl Wire2Api<String> + UnwindSafe,
    page_size: impl Wire2Api<u16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_pre_request_log",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_first_id = first_id.wire2api();
            let api_keyword = keyword.wire2api();
            let api_page_size = page_size.wire2api();
            move |task_callback| {
                Ok(list_pre_request_log(
                    api_first_id,
                    api_keyword,
                    api_page_size,
                ))
            }
        },
    )
}
fn wire_get_latest_request_log_impl(
    port_: MessagePort,
    request_id: impl Wire2Api<i64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_latest_request_log",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request_id = request_id.wire2api();
            move |task_callback| Ok(get_latest_request_log(api_request_id))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<ReqType> for i32 {
    fn wire2api(self) -> ReqType {
        match self {
            0 => ReqType::HTTP,
            1 => ReqType::GRPC,
            _ => unreachable!("Invalid variant for ReqType: {}", self),
        }
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for Code {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::OK => 0,
            Self::ProtoParseError => 1,
            Self::LibError => 2,
            Self::InvalidArgument => 3,
            Self::RespInvalidArgument => 4,
            Self::TonicError => 5,
            Self::HexError => 6,
            Self::SqliteError => 7,
            Self::SerdeJsonError => 8,
            Self::ProtoBufError => 9,
            Self::ChronError => 10,
            Self::AnyhowError => 11,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Code {}
impl support::IntoDart for CreateEnvironmentResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CreateEnvironmentResult {}

impl support::IntoDart for CreateProjectResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CreateProjectResult {}

impl support::IntoDart for EntryDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![self.name.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EntryDTO {}

impl support::IntoDart for EnvVariableDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.env_name.into_dart(),
            self.name.into_dart(),
            self.value.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnvVariableDTO {}

impl support::IntoDart for EnvironmentDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![self.env_name.into_dart(), self.list.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnvironmentDTO {}

impl support::IntoDart for Error {
    fn into_dart(self) -> support::DartAbi {
        vec![self.code.into_dart(), self.msg.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Error {}

impl support::IntoDart for GetBatchConfigResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GetBatchConfigResult {}

impl support::IntoDart for GetConfigResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GetConfigResult {}

impl support::IntoDart for GetRequestLogResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GetRequestLogResult {}

impl support::IntoDart for GetRequestResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GetRequestResult {}

impl support::IntoDart for ImportProtoResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ImportProtoResult {}

impl support::IntoDart for LibInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.version.into_dart(),
            self.build_num.into_dart(),
            self.build_at.into_dart(),
            self.commit_hash.into_dart(),
            self.code.into_dart(),
            self.req_type.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LibInfo {}

impl support::IntoDart for ListEnvironmentResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ListEnvironmentResult {}

impl support::IntoDart for ListNavProjectResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ListNavProjectResult {}

impl support::IntoDart for ListRequestLogData {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.keyword.into_dart(),
            self.last_id.into_dart(),
            self.page_size.into_dart(),
            self.first_id.into_dart(),
            self.request_logs.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ListRequestLogData {}

impl support::IntoDart for ListRequestLogResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ListRequestLogResult {}

impl support::IntoDart for NavProjectDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.project_id.into_dart(),
            self.project_name.into_dart(),
            self.req_type.into_dart(),
            self.services.into_dart(),
            self.requests.into_dart(),
            self.order_no.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NavProjectDTO {}

impl support::IntoDart for NavRequestDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![self.id.into_dart(), self.name.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NavRequestDTO {}

impl support::IntoDart for NavServiceDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![self.name.into_dart(), self.requests.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NavServiceDTO {}

impl support::IntoDart for ProtoFileDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![self.proto_files.into_dart(), self.import_paths.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ProtoFileDTO {}

impl support::IntoDart for ProtoFileResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ProtoFileResult {}

impl support::IntoDart for ReqType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::HTTP => 0,
            Self::GRPC => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ReqType {}
impl support::IntoDart for RequestDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.project_id.into_dart(),
            self.name.into_dart(),
            self.url.into_dart(),
            self.req_type.into_dart(),
            self.service.into_dart(),
            self.method.into_dart(),
            self.headers.into_dart(),
            self.params.into_dart(),
            self.req_json.into_dart(),
            self.resp_json.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RequestDTO {}

impl support::IntoDart for RequestLogData {
    fn into_dart(self) -> support::DartAbi {
        vec![self.metadata.into_dart(), self.body.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RequestLogData {}

impl support::IntoDart for RequestLogDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.request_id.into_dart(),
            self.base_url.into_dart(),
            self.path.into_dart(),
            self.error.into_dart(),
            self.info.into_dart(),
            self.request.into_dart(),
            self.response.into_dart(),
            self.created_at.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RequestLogDTO {}

impl support::IntoDart for ResponseDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![self.headers.into_dart(), self.body.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ResponseDTO {}

impl support::IntoDart for ResultDTO {
    fn into_dart(self) -> support::DartAbi {
        vec![self.code.into_dart(), self.msg.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ResultDTO {}

impl support::IntoDart for SendRequestInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![self.infos.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SendRequestInfo {}

impl support::IntoDart for SendRequestResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.info.into_dart(),
            self.resp.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SendRequestResult {}

impl support::IntoDart for UniqueIdResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.code.into_dart(),
            self.msg.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UniqueIdResult {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "api_bridge.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
