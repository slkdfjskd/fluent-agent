// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: proto/service.proto

package demopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoServiceClient is the client API for DemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoServiceClient interface {
	// 演示
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	TestNoPkg(ctx context.Context, in *TestNoPkgRequest, opts ...grpc.CallOption) (*TextNoPkgResponse, error)
	TestSamePkg(ctx context.Context, in *TestSamePkgRequest, opts ...grpc.CallOption) (*TestSamePkgResponse, error)
	TestAdd(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (DemoService_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (DemoService_ServerStreamClient, error)
	FullStream(ctx context.Context, opts ...grpc.CallOption) (DemoService_FullStreamClient, error)
}

type demoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoServiceClient(cc grpc.ClientConnInterface) DemoServiceClient {
	return &demoServiceClient{cc}
}

func (c *demoServiceClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/test.service.DemoService/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) TestNoPkg(ctx context.Context, in *TestNoPkgRequest, opts ...grpc.CallOption) (*TextNoPkgResponse, error) {
	out := new(TextNoPkgResponse)
	err := c.cc.Invoke(ctx, "/test.service.DemoService/TestNoPkg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) TestSamePkg(ctx context.Context, in *TestSamePkgRequest, opts ...grpc.CallOption) (*TestSamePkgResponse, error) {
	out := new(TestSamePkgResponse)
	err := c.cc.Invoke(ctx, "/test.service.DemoService/TestSamePkg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) TestAdd(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/test.service.DemoService/TestAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (DemoService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[0], "/test.service.DemoService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceClientStreamClient{stream}
	return x, nil
}

type DemoService_ClientStreamClient interface {
	Send(*StreamRequest) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type demoServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *demoServiceClientStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoServiceClientStreamClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoServiceClient) ServerStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (DemoService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[1], "/test.service.DemoService/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DemoService_ServerStreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type demoServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *demoServiceServerStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoServiceClient) FullStream(ctx context.Context, opts ...grpc.CallOption) (DemoService_FullStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[2], "/test.service.DemoService/FullStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceFullStreamClient{stream}
	return x, nil
}

type DemoService_FullStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type demoServiceFullStreamClient struct {
	grpc.ClientStream
}

func (x *demoServiceFullStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoServiceFullStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServiceServer is the server API for DemoService service.
// All implementations must embed UnimplementedDemoServiceServer
// for forward compatibility
type DemoServiceServer interface {
	// 演示
	Test(context.Context, *TestRequest) (*TestResponse, error)
	TestNoPkg(context.Context, *TestNoPkgRequest) (*TextNoPkgResponse, error)
	TestSamePkg(context.Context, *TestSamePkgRequest) (*TestSamePkgResponse, error)
	TestAdd(context.Context, *TestRequest) (*TestResponse, error)
	ClientStream(DemoService_ClientStreamServer) error
	ServerStream(*StreamRequest, DemoService_ServerStreamServer) error
	FullStream(DemoService_FullStreamServer) error
	mustEmbedUnimplementedDemoServiceServer()
}

// UnimplementedDemoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServiceServer struct {
}

func (UnimplementedDemoServiceServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedDemoServiceServer) TestNoPkg(context.Context, *TestNoPkgRequest) (*TextNoPkgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestNoPkg not implemented")
}
func (UnimplementedDemoServiceServer) TestSamePkg(context.Context, *TestSamePkgRequest) (*TestSamePkgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSamePkg not implemented")
}
func (UnimplementedDemoServiceServer) TestAdd(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAdd not implemented")
}
func (UnimplementedDemoServiceServer) ClientStream(DemoService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedDemoServiceServer) ServerStream(*StreamRequest, DemoService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedDemoServiceServer) FullStream(DemoService_FullStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FullStream not implemented")
}
func (UnimplementedDemoServiceServer) mustEmbedUnimplementedDemoServiceServer() {}

// UnsafeDemoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServiceServer will
// result in compilation errors.
type UnsafeDemoServiceServer interface {
	mustEmbedUnimplementedDemoServiceServer()
}

func RegisterDemoServiceServer(s grpc.ServiceRegistrar, srv DemoServiceServer) {
	s.RegisterService(&DemoService_ServiceDesc, srv)
}

func _DemoService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.service.DemoService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_TestNoPkg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestNoPkgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).TestNoPkg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.service.DemoService/TestNoPkg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).TestNoPkg(ctx, req.(*TestNoPkgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_TestSamePkg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSamePkgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).TestSamePkg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.service.DemoService/TestSamePkg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).TestSamePkg(ctx, req.(*TestSamePkgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_TestAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).TestAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.service.DemoService/TestAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).TestAdd(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServiceServer).ClientStream(&demoServiceClientStreamServer{stream})
}

type DemoService_ClientStreamServer interface {
	SendAndClose(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type demoServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *demoServiceClientStreamServer) SendAndClose(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoServiceClientStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DemoService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServiceServer).ServerStream(m, &demoServiceServerStreamServer{stream})
}

type DemoService_ServerStreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type demoServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *demoServiceServerStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DemoService_FullStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServiceServer).FullStream(&demoServiceFullStreamServer{stream})
}

type DemoService_FullStreamServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type demoServiceFullStreamServer struct {
	grpc.ServerStream
}

func (x *demoServiceFullStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoServiceFullStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoService_ServiceDesc is the grpc.ServiceDesc for DemoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.service.DemoService",
	HandlerType: (*DemoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _DemoService_Test_Handler,
		},
		{
			MethodName: "TestNoPkg",
			Handler:    _DemoService_TestNoPkg_Handler,
		},
		{
			MethodName: "TestSamePkg",
			Handler:    _DemoService_TestSamePkg_Handler,
		},
		{
			MethodName: "TestAdd",
			Handler:    _DemoService_TestAdd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _DemoService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _DemoService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FullStream",
			Handler:       _DemoService_FullStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
